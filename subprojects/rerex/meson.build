project('rerex', ['c'],
        version: '0.0.1',
        license: 'ISC',
        meson_version: '>= 0.49.0',
        default_options: [
          'c_std=c99',
          'default_library=shared',
          'warning_level=3',
        ])

major_version = meson.project_version().split('.')[0]
version_suffix = '-@0@'.format(major_version)
versioned_name = 'rerex' + version_suffix

# Load build tools
pkg = import('pkgconfig')
cc = meson.get_compiler('c')

# Set ultra strict warnings for developers, if requested
if get_option('strict')
  if cc.get_id() == 'clang'
    c_warnings = [
      '-Weverything',
      '-Wno-padded',
    ]
  elif cc.get_id() == 'gcc'
    c_warnings = [
      # '-Waggregate-return',
      '-Walloc-size-larger-than=64',
      '-Walloc-zero',
      '-Walloca',
      '-Wanalyzer-too-complex',
      '-Warith-conversion',
      '-Warray-bounds=2',
      '-Wattribute-alias=2',
      '-Wcast-align=strict',
      '-Wcast-qual',
      '-Wconversion',
      '-Wdate-time',
      '-Wdisabled-optimization',
      '-Wdouble-promotion',
      '-Wduplicated-branches',
      '-Wduplicated-cond',
      '-Wfloat-equal',
      '-Wformat-overflow=2',
      '-Wformat-signedness',
      '-Wformat-truncation=2',
      '-Wformat=2',
      '-Wframe-larger-than=512',
      '-Wimplicit-fallthrough=2',
      '-Winit-self',
      '-Winline',
      '-Winvalid-pch',
      # '-Wlarger-than=',
      '-Wlogical-op',
      '-Wmissing-declarations',
      '-Wmissing-include-dirs',
      '-Wmultichar',
      '-Wnormalized=nfc',
      '-Wnull-dereference',
      '-Wpacked',
      # '-Wpadded',
      '-Wredundant-decls',
      '-Wscalar-storage-order',
      '-Wshadow',
      '-Wshift-overflow=2',
      '-Wsizeof-array-argument',
      '-Wstack-protector',
      '-Wstack-usage=512',
      '-Wstrict-aliasing=3',
      '-Wstrict-overflow=5',
      '-Wstringop-overflow=3',
      '-Wsuggest-attribute=cold',
      '-Wsuggest-attribute=const',
      '-Wsuggest-attribute=format',
      '-Wsuggest-attribute=malloc',
      '-Wsuggest-attribute=noreturn',
      '-Wsuggest-attribute=pure',
      # '-Wswitch-default',
      '-Wswitch-enum',
      '-Wsync-nand',
      # '-Wsystem-headers',
      # '-Wtraditional',
      # '-Wtraditional-conversion',
      '-Wtrampolines',
      '-Wundef',
      '-Wunused-const-variable=2',
      '-Wunused-macros',
      '-Wvarargs',
      '-Wvector-operation-performance',
      '-Wvla',
      '-Wwrite-strings',
    ]
  elif cc.get_id() == 'msvc'
    c_warnings = [
      '/Wall',    # everything, except...
      '/wd4028',  # formal parameter different from declaration
      '/wd4204',  # non-constant aggregate initializer
      '/wd4514',  # unreferenced inline function has been removed
      '/wd4668',  # not defined as a preprocessor macro
      '/wd4706',  # assignment within conditional expression
      '/wd4710',  # function not inlined
      '/wd4711',  # function selected for automatic inline expansion
      '/wd4820',  # padding added after construct
      '/wd5045',  # will insert Spectre mitigation
    ]
  else
    c_warnings = []
  endif

  add_project_arguments(cc.get_supported_arguments(c_warnings), language: ['c'])
endif

# Build as C++ on MSVC
if cc.get_id() == 'msvc'
  add_project_arguments(['/TP'], language: ['c'])
endif

# Determine library type and the flags needed to build it
if get_option('default_library') == 'both'
  if host_machine.system() == 'windows'
    error('default_library=both is not supported on Windows')
  endif

  library_type = 'both_libraries'
  library_args = ['-DREREX_INTERNAL']
elif get_option('default_library') == 'shared'
  library_type = 'shared_library'
  library_args = ['-DREREX_INTERNAL']
else
  library_type = 'static_library'
  library_args = ['-DREREX_INTERNAL', '-DREREX_STATIC']
endif

# Build shared and/or static library/libraries
librerex = build_target(
  versioned_name,
  ['src/rerex.c'],
  version: meson.project_version(),
  include_directories: include_directories(['include']),
  c_args: library_args,
  gnu_symbol_visibility: 'hidden',
  install: true,
  target_type: library_type)

# Generage pkg-config file
pkg.generate(
  librerex,
  name: 'Rerex',
  filebase: versioned_name,
  subdirs: [versioned_name],
  version: meson.project_version(),
  description: 'A simple and efficient regular expression implementation')

# Install header to a versioned include directory
install_headers(['include/rerex/rerex.h'], subdir: versioned_name / 'rerex')

# Build and run tests
if get_option('tests')
  librerex_dep = declare_dependency(link_with: librerex)

  foreach name : ['syntax', 'match', 'xsd']
    full_name = 'test_@0@'.format(name)
    test(full_name,
         executable(full_name,
                    'test/@0@.c'.format(full_name),
                    include_directories: include_directories(['include']),
                    dependencies: librerex_dep))
  endforeach
endif
